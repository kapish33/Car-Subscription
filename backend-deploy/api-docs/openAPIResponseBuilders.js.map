{"version":3,"sources":["../../src/api-docs/openAPIResponseBuilders.ts","../../src/common/models/serviceResponse.ts"],"sourcesContent":["import { StatusCodes } from 'http-status-codes';\nimport { z } from 'zod';\n\nimport { ServiceResponseSchema } from '@/common/models/serviceResponse';\n\nexport function createApiResponse(schema: z.ZodTypeAny, description: string, statusCode = StatusCodes.OK) {\n  return {\n    [statusCode]: {\n      description,\n      content: {\n        'application/json': {\n          schema: ServiceResponseSchema(schema),\n        },\n      },\n    },\n  };\n}\n\n// Use if you want multiple responses for a single endpoint\n\n// import { ResponseConfig } from '@asteasolutions/zod-to-openapi';\n// import { ApiResponseConfig } from '@common/models/openAPIResponseConfig';\n// export type ApiResponseConfig = {\n//   schema: z.ZodTypeAny;\n//   description: string;\n//   statusCode: StatusCodes;\n// };\n// export function createApiResponses(configs: ApiResponseConfig[]) {\n//   const responses: { [key: string]: ResponseConfig } = {};\n//   configs.forEach(({ schema, description, statusCode }) => {\n//     responses[statusCode] = {\n//       description,\n//       content: {\n//         'application/json': {\n//           schema: ServiceResponseSchema(schema),\n//         },\n//       },\n//     };\n//   });\n//   return responses;\n// }\n","import { z } from 'zod';\n\nexport enum ResponseStatus {\n  Success,\n  Failed,\n}\n\nexport class ServiceResponse<T = null> {\n  success: boolean;\n  message: string;\n  responseObject: T;\n  statusCode: number;\n\n  constructor(status: ResponseStatus, message: string, responseObject: T, statusCode: number) {\n    this.success = status === ResponseStatus.Success;\n    this.message = message;\n    this.responseObject = responseObject;\n    this.statusCode = statusCode;\n  }\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    message: z.string(),\n    responseObject: dataSchema.optional(),\n    statusCode: z.number(),\n  });\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA4B;;;ACA5B,iBAAkB;AAqBX,IAAM,wBAAwB,CAAyB,eAC5D,aAAE,OAAO;AAAA,EACP,SAAS,aAAE,QAAQ;AAAA,EACnB,SAAS,aAAE,OAAO;AAAA,EAClB,gBAAgB,WAAW,SAAS;AAAA,EACpC,YAAY,aAAE,OAAO;AACvB,CAAC;;;ADtBI,SAAS,kBAAkB,QAAsB,aAAqB,aAAa,qCAAY,IAAI;AACxG,SAAO;AAAA,IACL,CAAC,UAAU,GAAG;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ,sBAAsB,MAAM;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;","names":[]}
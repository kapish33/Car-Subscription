{"version":3,"sources":["../../../src/common/middleware/requestLogger.ts","../../../src/common/utils/envConfig.ts"],"sourcesContent":["import { randomUUID } from 'crypto';\nimport { Request, RequestHandler, Response } from 'express';\nimport { IncomingMessage, ServerResponse } from 'http';\nimport { getReasonPhrase, StatusCodes } from 'http-status-codes';\nimport { LevelWithSilent } from 'pino';\nimport { CustomAttributeKeys, Options, pinoHttp } from 'pino-http';\n\nimport { env } from '@/common/utils/envConfig';\n\nenum LogLevel {\n  Fatal = 'fatal',\n  Error = 'error',\n  Warn = 'warn',\n  Info = 'info',\n  Debug = 'debug',\n  Trace = 'trace',\n  Silent = 'silent',\n}\n\ntype PinoCustomProps = {\n  request: Request;\n  response: Response;\n  error: Error;\n  responseBody: unknown;\n};\n\nconst requestLogger = (options?: Options): RequestHandler[] => {\n  const pinoOptions: Options = {\n    enabled: env.isProduction,\n    customProps: customProps as unknown as Options['customProps'],\n    redact: [],\n    genReqId,\n    customLogLevel,\n    customSuccessMessage,\n    customReceivedMessage: (req) => `request received: ${req.method}`,\n    customErrorMessage: (_req, res) => `request errored with status code: ${res.statusCode}`,\n    customAttributeKeys,\n    ...options,\n  };\n  return [responseBodyMiddleware, pinoHttp(pinoOptions)];\n};\n\nconst customAttributeKeys: CustomAttributeKeys = {\n  req: 'request',\n  res: 'response',\n  err: 'error',\n  responseTime: 'timeTaken',\n};\n\nconst customProps = (req: Request, res: Response): PinoCustomProps => ({\n  request: req,\n  response: res,\n  error: res.locals.err,\n  responseBody: res.locals.responseBody,\n});\n\nconst responseBodyMiddleware: RequestHandler = (_req, res, next) => {\n  const isNotProduction = !env.isProduction;\n  if (isNotProduction) {\n    const originalSend = res.send;\n    res.send = function (content) {\n      res.locals.responseBody = content;\n      res.send = originalSend;\n      return originalSend.call(res, content);\n    };\n  }\n  next();\n};\n\nconst customLogLevel = (_req: IncomingMessage, res: ServerResponse<IncomingMessage>, err?: Error): LevelWithSilent => {\n  if (err || res.statusCode >= StatusCodes.INTERNAL_SERVER_ERROR) return LogLevel.Error;\n  if (res.statusCode >= StatusCodes.BAD_REQUEST) return LogLevel.Warn;\n  if (res.statusCode >= StatusCodes.MULTIPLE_CHOICES) return LogLevel.Silent;\n  return LogLevel.Info;\n};\n\nconst customSuccessMessage = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\n  if (res.statusCode === StatusCodes.NOT_FOUND) return getReasonPhrase(StatusCodes.NOT_FOUND);\n  return `${req.method} completed`;\n};\n\nconst genReqId = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\n  const existingID = req.id ?? req.headers['x-request-id'];\n  if (existingID) return existingID;\n  const id = randomUUID();\n  res.setHeader('X-Request-Id', id);\n  return id;\n};\n\nexport default requestLogger();\n","import dotenv from 'dotenv';\nimport { cleanEnv, host, num, port, str, testOnly } from 'envalid';\n\ndotenv.config();\n\nexport const env = cleanEnv(process.env, {\n  NODE_ENV: str({ devDefault: testOnly('test'), choices: ['development', 'production', 'test'] }),\n  HOST: host({ devDefault: testOnly('localhost') }),\n  PORT: port({ devDefault: testOnly(3000) }),\n  CORS_ORIGIN: str({ devDefault: testOnly('http://localhost:3000') }),\n  COMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\n  COMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\n  MONGO_DB_URL: str({ devDefault: testOnly('mongodb+srv://kapish:kapish@cluster0.ch85x.mongodb.net/advocatehunt') }),\n  JWT_SECRET: str({ devDefault: testOnly('$2a$10$rl/7yPMiN0G9vVyyqKrPDOMxXVOJXD2FVY9J4gdtn5JbcmFFK0Bvq') }),\n  JWT_TOKEN_Expiry: str({ devDefault: testOnly('1d') }),\n  JWT_REFRESH_SECRET: str({\n    devDefault: testOnly('$2a$10$a4m5BrSFBh48Uc8DzL41rOoLMtkNpH1a/kajgkzrw07XRXqaBWlse'),\n  }),\n  REFRESH_TOKEN_Expiry: str({ devDefault: testOnly('30d') }),\n  RESEND_API_KEY: str({ devDefault: testOnly('re_7RaazBDP_9iZhzCtXmhNVCQKasUN5CW1C') })\n});\n"],"mappings":"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","names":["dotenv"]}
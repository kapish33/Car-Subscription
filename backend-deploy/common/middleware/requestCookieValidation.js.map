{"version":3,"sources":["../../../src/common/middleware/requestCookieValidation.ts","../../../src/common/utils/envConfig.ts","../../../src/common/utils/tokenUtils.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport jwt, { JwtPayload } from 'jsonwebtoken';\nimport { StatusCodes } from 'http-status-codes';\nimport { env } from '../utils/envConfig';\nimport { generateTokens } from '../utils/tokenUtils';\nimport { User } from '@/api/user/userModel';\n\nexport const requestCookieValidation = async (req: Request, res: Response, next: NextFunction) => {\n  const accessToken = req.cookies.accessToken;\n  const refreshToken = req.cookies.refreshToken;\n\n  if (!accessToken && !refreshToken) {\n    return res.status(StatusCodes.UNAUTHORIZED).json({ valid: false, message: 'No tokens provided' });\n  }\n\n  try {\n    const { user } = jwt.verify(refreshToken, env.JWT_REFRESH_SECRET) as { user: User };\n    req.user = user; // This Will Enshure To Pass The User That can be got Further \n    return next();\n  } catch (err) {\n    if (!refreshToken) {\n      return res\n        .status(StatusCodes.UNAUTHORIZED)\n        .json({ valid: false, message: 'Invalid access token and no refresh token provided' });\n    }\n\n    try {\n      const { user } = jwt.verify(refreshToken, env.JWT_REFRESH_SECRET) as { user: User };\n      const { accessToken, refreshToken: rft } = generateTokens(user);\n      console.log(\"refetch Token\",accessToken,rft)\n\n      res.cookie('accessToken', accessToken, {\n        httpOnly: true,\n        sameSite: 'strict',\n      });\n      res.cookie('refreshToken', rft, {\n        httpOnly: true,\n        sameSite: 'strict',\n      });\n\n        req.user = user;\n      return next();\n    } catch (err) {\n      return res.status(StatusCodes.UNAUTHORIZED).json({ valid: false, message: 'Invalid refresh token' });\n    }\n  }\n};","import dotenv from 'dotenv';\nimport { cleanEnv, host, num, port, str, testOnly } from 'envalid';\n\ndotenv.config();\n\nexport const env = cleanEnv(process.env, {\n  NODE_ENV: str({ devDefault: testOnly('test'), choices: ['development', 'production', 'test'] }),\n  HOST: host({ devDefault: testOnly('localhost') }),\n  PORT: port({ devDefault: testOnly(3000) }),\n  CORS_ORIGIN: str({ devDefault: testOnly('http://localhost:3000') }),\n  COMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\n  COMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\n  MONGO_DB_URL: str({ devDefault: testOnly('mongodb+srv://kapish:kapish@cluster0.ch85x.mongodb.net/advocatehunt') }),\n  JWT_SECRET: str({ devDefault: testOnly('$2a$10$rl/7yPMiN0G9vVyyqKrPDOMxXVOJXD2FVY9J4gdtn5JbcmFFK0Bvq') }),\n  JWT_TOKEN_Expiry: str({ devDefault: testOnly('1d') }),\n  JWT_REFRESH_SECRET: str({\n    devDefault: testOnly('$2a$10$a4m5BrSFBh48Uc8DzL41rOoLMtkNpH1a/kajgkzrw07XRXqaBWlse'),\n  }),\n  REFRESH_TOKEN_Expiry: str({ devDefault: testOnly('30d') }),\n  RESEND_API_KEY: str({ devDefault: testOnly('re_7RaazBDP_9iZhzCtXmhNVCQKasUN5CW1C') })\n});\n","import { User } from '@/api/user/userModel';\nimport jwt from 'jsonwebtoken';\nimport { env } from './envConfig';\n\n/**\n * Generates JWT access and refresh tokens for a user\n * @param user - The user object\n * @returns An object containing the accessToken and refreshToken\n */\nexport const generateTokens = (user: User): { accessToken: string; refreshToken: string } => {\n  const accessToken = jwt.sign({ user }, env.JWT_SECRET, { expiresIn: env.JWT_TOKEN_Expiry });\n  const refreshToken = jwt.sign({ user }, env.JWT_REFRESH_SECRET, { expiresIn: env.REFRESH_TOKEN_Expiry });\n\n  return { accessToken, refreshToken };\n};\n"],"mappings":"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","names":["import_jsonwebtoken","dotenv","jwt","jwt","accessToken","err"]}
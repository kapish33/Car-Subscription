{"version":3,"sources":["../../../src/common/utils/httpHandlers.ts","../../../src/common/models/serviceResponse.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { StatusCodes } from 'http-status-codes';\nimport { ZodError, ZodSchema } from 'zod';\n\nimport { ResponseStatus, ServiceResponse } from '@/common/models/serviceResponse';\n\nexport const handleServiceResponse = (serviceResponse: ServiceResponse<any>, response: Response) => {\n  return response.status(serviceResponse.statusCode).send(serviceResponse);\n};\n\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\n  try {\n    schema.parse({ body: req.body, query: req.query, params: req.params });\n    next();\n  } catch (err) {\n    const errorMessage = `Invalid input: ${(err as ZodError).errors.map((e) => e.message).join(', ')}`;\n    const statusCode = StatusCodes.BAD_REQUEST;\n    res.status(statusCode).send(new ServiceResponse<null>(ResponseStatus.Failed, errorMessage, null, statusCode));\n  }\n};\n","import { z } from 'zod';\n\nexport enum ResponseStatus {\n  Success,\n  Failed,\n}\n\nexport class ServiceResponse<T = null> {\n  success: boolean;\n  message: string;\n  responseObject: T;\n  statusCode: number;\n\n  constructor(status: ResponseStatus, message: string, responseObject: T, statusCode: number) {\n    this.success = status === ResponseStatus.Success;\n    this.message = message;\n    this.responseObject = responseObject;\n    this.statusCode = statusCode;\n  }\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    message: z.string(),\n    responseObject: dataSchema.optional(),\n    statusCode: z.number(),\n  });\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,+BAA4B;;;ACD5B,iBAAkB;AAOX,IAAM,kBAAN,MAAgC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,QAAwB,SAAiB,gBAAmB,YAAoB;AAC1F,SAAK,UAAU,WAAW;AAC1B,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAAA,EACpB;AACF;;;ADbO,IAAM,wBAAwB,CAAC,iBAAuC,aAAuB;AAClG,SAAO,SAAS,OAAO,gBAAgB,UAAU,EAAE,KAAK,eAAe;AACzE;AAEO,IAAM,kBAAkB,CAAC,WAAsB,CAAC,KAAc,KAAe,SAAuB;AACzG,MAAI;AACF,WAAO,MAAM,EAAE,MAAM,IAAI,MAAM,OAAO,IAAI,OAAO,QAAQ,IAAI,OAAO,CAAC;AACrE,SAAK;AAAA,EACP,SAAS,KAAK;AACZ,UAAM,eAAe,kBAAmB,IAAiB,OAAO,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,IAAI,CAAC;AAChG,UAAM,aAAa,qCAAY;AAC/B,QAAI,OAAO,UAAU,EAAE,KAAK,IAAI,gCAA6C,cAAc,MAAM,UAAU,CAAC;AAAA,EAC9G;AACF;","names":[]}
{"version":3,"sources":["../../../src/api/healthCheck/healthCheckRouter.ts","../../../src/api-docs/openAPIResponseBuilders.ts","../../../src/common/models/serviceResponse.ts","../../../src/common/utils/httpHandlers.ts"],"sourcesContent":["import { OpenAPIRegistry } from '@asteasolutions/zod-to-openapi';\nimport express, { Request, Response, Router } from 'express';\nimport { StatusCodes } from 'http-status-codes';\nimport { z } from 'zod';\n\nimport { createApiResponse } from '@/api-docs/openAPIResponseBuilders';\nimport { ResponseStatus, ServiceResponse } from '@/common/models/serviceResponse';\nimport { handleServiceResponse } from '@/common/utils/httpHandlers';\n\nexport const healthCheckRegistry = new OpenAPIRegistry();\n\nexport const healthCheckRouter: Router = (() => {\n  const router = express.Router();\n\n  healthCheckRegistry.registerPath({\n    method: 'get',\n    path: '/health-check',\n    tags: ['Health Check'],\n    responses: createApiResponse(z.null(), 'Success'),\n  });\n\n  router.get('/', (_req: Request, res: Response) => {\n    const serviceResponse = new ServiceResponse(ResponseStatus.Success, 'Service is healthy', null, StatusCodes.OK);\n    handleServiceResponse(serviceResponse, res);\n  });\n\n  return router;\n})();\n","import { StatusCodes } from 'http-status-codes';\nimport { z } from 'zod';\n\nimport { ServiceResponseSchema } from '@/common/models/serviceResponse';\n\nexport function createApiResponse(schema: z.ZodTypeAny, description: string, statusCode = StatusCodes.OK) {\n  return {\n    [statusCode]: {\n      description,\n      content: {\n        'application/json': {\n          schema: ServiceResponseSchema(schema),\n        },\n      },\n    },\n  };\n}\n\n// Use if you want multiple responses for a single endpoint\n\n// import { ResponseConfig } from '@asteasolutions/zod-to-openapi';\n// import { ApiResponseConfig } from '@common/models/openAPIResponseConfig';\n// export type ApiResponseConfig = {\n//   schema: z.ZodTypeAny;\n//   description: string;\n//   statusCode: StatusCodes;\n// };\n// export function createApiResponses(configs: ApiResponseConfig[]) {\n//   const responses: { [key: string]: ResponseConfig } = {};\n//   configs.forEach(({ schema, description, statusCode }) => {\n//     responses[statusCode] = {\n//       description,\n//       content: {\n//         'application/json': {\n//           schema: ServiceResponseSchema(schema),\n//         },\n//       },\n//     };\n//   });\n//   return responses;\n// }\n","import { z } from 'zod';\n\nexport enum ResponseStatus {\n  Success,\n  Failed,\n}\n\nexport class ServiceResponse<T = null> {\n  success: boolean;\n  message: string;\n  responseObject: T;\n  statusCode: number;\n\n  constructor(status: ResponseStatus, message: string, responseObject: T, statusCode: number) {\n    this.success = status === ResponseStatus.Success;\n    this.message = message;\n    this.responseObject = responseObject;\n    this.statusCode = statusCode;\n  }\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    message: z.string(),\n    responseObject: dataSchema.optional(),\n    statusCode: z.number(),\n  });\n","import { NextFunction, Request, Response } from 'express';\nimport { StatusCodes } from 'http-status-codes';\nimport { ZodError, ZodSchema } from 'zod';\n\nimport { ResponseStatus, ServiceResponse } from '@/common/models/serviceResponse';\n\nexport const handleServiceResponse = (serviceResponse: ServiceResponse<any>, response: Response) => {\n  return response.status(serviceResponse.statusCode).send(serviceResponse);\n};\n\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\n  try {\n    schema.parse({ body: req.body, query: req.query, params: req.params });\n    next();\n  } catch (err) {\n    const errorMessage = `Invalid input: ${(err as ZodError).errors.map((e) => e.message).join(', ')}`;\n    const statusCode = StatusCodes.BAD_REQUEST;\n    res.status(statusCode).send(new ServiceResponse<null>(ResponseStatus.Failed, errorMessage, null, statusCode));\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAgC;AAChC,qBAAmD;AACnD,IAAAA,4BAA4B;AAC5B,IAAAC,cAAkB;;;ACHlB,+BAA4B;;;ACA5B,iBAAkB;AAOX,IAAM,kBAAN,MAAgC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,QAAwB,SAAiB,gBAAmB,YAAoB;AAC1F,SAAK,UAAU,WAAW;AAC1B,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAAA,EACpB;AACF;AAEO,IAAM,wBAAwB,CAAyB,eAC5D,aAAE,OAAO;AAAA,EACP,SAAS,aAAE,QAAQ;AAAA,EACnB,SAAS,aAAE,OAAO;AAAA,EAClB,gBAAgB,WAAW,SAAS;AAAA,EACpC,YAAY,aAAE,OAAO;AACvB,CAAC;;;ADtBI,SAAS,kBAAkB,QAAsB,aAAqB,aAAa,qCAAY,IAAI;AACxG,SAAO;AAAA,IACL,CAAC,UAAU,GAAG;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ,sBAAsB,MAAM;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AEfA,IAAAC,4BAA4B;AAKrB,IAAM,wBAAwB,CAAC,iBAAuC,aAAuB;AAClG,SAAO,SAAS,OAAO,gBAAgB,UAAU,EAAE,KAAK,eAAe;AACzE;;;AHCO,IAAM,sBAAsB,IAAI,sCAAgB;AAEhD,IAAM,qBAA6B,MAAM;AAC9C,QAAM,SAAS,eAAAC,QAAQ,OAAO;AAE9B,sBAAoB,aAAa;AAAA,IAC/B,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,MAAM,CAAC,cAAc;AAAA,IACrB,WAAW,kBAAkB,cAAE,KAAK,GAAG,SAAS;AAAA,EAClD,CAAC;AAED,SAAO,IAAI,KAAK,CAAC,MAAe,QAAkB;AAChD,UAAM,kBAAkB,IAAI,iCAAwC,sBAAsB,MAAM,sCAAY,EAAE;AAC9G,0BAAsB,iBAAiB,GAAG;AAAA,EAC5C,CAAC;AAED,SAAO;AACT,GAAG;","names":["import_http_status_codes","import_zod","import_http_status_codes","express"]}
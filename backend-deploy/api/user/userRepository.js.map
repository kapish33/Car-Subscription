{"version":3,"sources":["../../../src/api/user/userRepository.ts","../../../src/common/utils/tokenUtils.ts","../../../src/common/utils/envConfig.ts","../../../src/api/user/userSchema.ts","../../../src/common/utils/emailService.ts"],"sourcesContent":["import bcrypt from 'bcryptjs';\nimport crypto from 'crypto';\n\nimport { generateTokens } from '@/common/utils/tokenUtils';\n\nimport {\n  LoginPayloadBody,\n  ResetNewPasswordPayloadBody,\n  ResetPasswordPayloadBody,\n  Tokens,\n  User,\n  UserPayload,\n  UserWithTokens,\n} from './userModel';\nimport { UserModel } from './userSchema';\nimport { Resend } from 'resend';\nimport { sendEmail } from '@/common/utils/emailService';\nconst resend = new Resend('re_7RaazBDP_9iZhzCtXmhNVCQKasUN5CW1C');\n\nexport const userRepository = {\n  findAllAsync: async (): Promise<User[]> => {\n    return UserModel.find().select('-password -__v').exec();\n  },\n\n  findByIdAsync: async (id: User['_id']): Promise<User | null> => {\n    return UserModel.findById(id).select('-password -__v').exec();\n  },\n\n  createUserAsync: async (newUser: UserPayload): Promise<UserWithTokens> => {\n    // Hash the user's password before saving\n    const hashedPassword = await bcrypt.hash(newUser.password, 10);\n    newUser.password = hashedPassword;\n\n    const user = new UserModel(newUser);\n    await user.save();\n\n    // Generate JWT tokens\n    const { accessToken, refreshToken } = generateTokens(user);\n\n    // Remove sensitive fields and convert to plain JavaScript object\n    const userObject = user.toObject();\n    userObject.password = '';\n    delete userObject.__v;\n\n    // Return the created user (without sensitive fields) and the generated tokens\n    return {\n      user: userObject as User,\n      accessToken,\n      refreshToken,\n    };\n  },\n\n  loginUserAsync: async (credentials: LoginPayloadBody): Promise<Tokens | null> => {\n    const { email, password } = credentials;\n\n    // Find the user by email\n    const user = await UserModel.findOne({ email });\n\n    if (!user) {\n      // User with the provided email does not exist\n      return null;\n    }\n\n    // Compare the provided password with the hashed password stored in the database\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n\n    if (!isPasswordValid) {\n      // Passwords do not match\n      return null;\n    }\n\n    // Generate JWT tokens\n    const { accessToken, refreshToken } = generateTokens(user);\n\n    // Return the generated tokens\n    return { accessToken, refreshToken };\n  },\n\n  resetUserAsync: async (resetUserPayload: ResetPasswordPayloadBody): Promise<string | null> => {\n    const { email } = resetUserPayload;\n\n    // Find the user by email\n    const user = await UserModel.findOne({ email });\n\n    if (!user) {\n      // User with the provided email does not exist\n      return null;\n    }\n\n    // Generate a reset token and set an expiration time (e.g., 15 minutes)\n    const resetToken = crypto.randomBytes(32).toString('hex');\n    const resetTokenExpiry = Date.now() + 15 * 60 * 1000; // 15 minutes from now\n\n    // Save the reset token and expiry time to the user's record\n    user.resetToken = resetToken;\n    user.resetTokenExpiry = resetTokenExpiry;\n    await user.save();\n\n    // Send the reset password email\n    const emailResult = await sendEmail({\n      from: '\"Your Company\" <onboarding@resend.dev>', // Replace with your sender address\n      to: [email], // Replace with your\n      subject: 'Password Reset Request',\n      html: `<p>You requested a password reset. Use the following token to reset your password:</p><p><strong>${resetToken}</strong></p><p>This token is valid for 15 minutes.</p>`,\n    });\n    console.log(\"resetToken\",resetToken)\n\n    if (emailResult.success) {\n      return 'Password reset email sent';\n    } else {\n      return 'Error sending password reset email';\n    }\n  },\n\n  setNewUserPassAsync: async (resetUserPayload: ResetNewPasswordPayloadBody): Promise<string | null> => {\n    const { token, newPassword } = resetUserPayload;\n\n    // Find the user by Token\n    const user = await UserModel.findOne({ resetToken: token });\n\n    if (!user) {\n      // User with the provided email does not exist\n      return null;\n    }\n\n    // Check if the token has expired\n    if (user.resetTokenExpiry && user.resetTokenExpiry < Date.now()) {\n      return null;\n    }\n\n    user.password = newPassword; // Make sure to hash the password before saving\n    user.resetToken = undefined;\n    user.resetTokenExpiry = undefined;\n    await user.save();\n\n    return \"Password Updated successfully\"\n  },\n};\n","import { User } from '@/api/user/userModel';\nimport jwt from 'jsonwebtoken';\nimport { env } from './envConfig';\n\n/**\n * Generates JWT access and refresh tokens for a user\n * @param user - The user object\n * @returns An object containing the accessToken and refreshToken\n */\nexport const generateTokens = (user: User): { accessToken: string; refreshToken: string } => {\n  const accessToken = jwt.sign({ user }, env.JWT_SECRET, { expiresIn: env.JWT_TOKEN_Expiry });\n  const refreshToken = jwt.sign({ user }, env.JWT_REFRESH_SECRET, { expiresIn: env.REFRESH_TOKEN_Expiry });\n\n  return { accessToken, refreshToken };\n};\n","import dotenv from 'dotenv';\nimport { cleanEnv, host, num, port, str, testOnly } from 'envalid';\n\ndotenv.config();\n\nexport const env = cleanEnv(process.env, {\n  NODE_ENV: str({ devDefault: testOnly('test'), choices: ['development', 'production', 'test'] }),\n  HOST: host({ devDefault: testOnly('localhost') }),\n  PORT: port({ devDefault: testOnly(3000) }),\n  CORS_ORIGIN: str({ devDefault: testOnly('http://localhost:3000') }),\n  COMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\n  COMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\n  MONGO_DB_URL: str({ devDefault: testOnly('mongodb+srv://kapish:kapish@cluster0.ch85x.mongodb.net/advocatehunt') }),\n  JWT_SECRET: str({ devDefault: testOnly('$2a$10$rl/7yPMiN0G9vVyyqKrPDOMxXVOJXD2FVY9J4gdtn5JbcmFFK0Bvq') }),\n  JWT_TOKEN_Expiry: str({ devDefault: testOnly('1d') }),\n  JWT_REFRESH_SECRET: str({\n    devDefault: testOnly('$2a$10$a4m5BrSFBh48Uc8DzL41rOoLMtkNpH1a/kajgkzrw07XRXqaBWlse'),\n  }),\n  REFRESH_TOKEN_Expiry: str({ devDefault: testOnly('30d') }),\n  RESEND_API_KEY: str({ devDefault: testOnly('re_7RaazBDP_9iZhzCtXmhNVCQKasUN5CW1C') })\n});\n","import mongoose, { CallbackError, Document, Schema } from 'mongoose';\nimport { User } from './userModel';\nimport bcrypt from 'bcryptjs';\n\nconst UserSchema: Schema = new Schema(\n  {\n    firstName: { type: String, required: true },\n    lastName: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    age: { type: Number, required: true },\n    password: { type: String, required: true },\n    resetToken: { type: String, required: false },\n    resetTokenExpiry: { type: Number, required: false }\n  },\n  {\n    versionKey: false,\n    timestamp: true,\n  }\n);\n\n// Hash password before saving\nUserSchema.pre<User>('save', async function (next) {\n  if (!this.isModified('password')) {\n    return next();\n  }\n  try {\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n    return next();\n  } catch (err) {\n    return next(err as CallbackError);\n  }\n});\n\n// Method to compare passwords\nUserSchema.methods.comparePassword = async function (candidatePassword: string) {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\nexport const UserModel = mongoose.model<User>('User', UserSchema);\n","import { Resend } from 'resend';\nimport { env } from './envConfig';\n\n// Initialize the Resend instance\nconst resend = new Resend(env.RESEND_API_KEY);\n\ninterface SendEmailParams {\n  from: string;\n  to: string[];\n  subject: string;\n  html: string;\n}\n\ninterface SendEmailResult {\n  success: boolean;\n  error?: Error;\n}\n\nexport const sendEmail = async ({ from, to, subject, html }: SendEmailParams): Promise<SendEmailResult> => {\n  try {\n    const { data, error } = await resend.emails.send({\n      from,\n      to,\n      subject,\n      html,\n    });\n\n    if (error) {\n      console.error(\"Error from resend API:\", error);\n      return { success: false, error };\n    }\n\n    console.log('Email sent:', data);\n    return { success: true };\n  } catch (err) {\n    console.error('Unexpected error:', err);\n    return { success: false, error: err as Error };\n  }\n};\n\n"],"mappings":"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","names":["import_bcryptjs","dotenv","jwt","bcrypt","mongoose","import_resend","resend","bcrypt","crypto"]}
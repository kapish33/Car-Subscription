{"version":3,"sources":["../../../src/api/user/userModel.ts","../../../src/common/utils/commonValidation.ts"],"sourcesContent":["import { extendZodWithOpenApi } from '@asteasolutions/zod-to-openapi';\nimport { Document } from 'mongoose';\nimport { z } from 'zod';\n\nimport { commonValidations } from '@/common/utils/commonValidation';\n\nextendZodWithOpenApi(z);\n\n/**\n * Schema for User model using Zod\n */\nexport const UserSchema = z.object({\n  _id: z.string().uuid(),\n  firstName: z.string(),\n  email: z.string().email(),\n  lastName: z.string(),\n  age: z.number(),\n  password: z.string(),\n  resetToken: z.string().optional(),\n  resetTokenExpiry: z.number().optional(),\n  // createdAt: z.date(),\n  // updatedAt: z.date(),\n});\n\n/**\n * Schema for JWT tokens using Zod\n */\nexport const TokensSchema = z.object({\n  accessToken: z.string(),\n  refreshToken: z.string(),\n});\n\nexport type Tokens = z.infer<typeof TokensSchema>;\n\n/**\n * Schema for User model with JWT tokens using Zod\n */\nexport const UserWithTokensSchema = z.object({\n  user: UserSchema,\n  ...TokensSchema.shape,\n});\n\nexport type UserWithTokens = z.infer<typeof UserWithTokensSchema>;\n\n/**\n * Type for User, extending Zod schema with Mongoose Document properties\n */\nexport type User = z.infer<typeof UserSchema> & Document;\n\n/**\n * Schema for GET users/:id endpoint input validation\n */\nexport const GetUserSchema = z.object({\n  params: z.object({ id: commonValidations.id }),\n});\n\n/**\n * Type for User payload in POST /users/create endpoint\n */\nexport type UserPayload = z.infer<typeof CreateUserSchema>['body'];\n\n/**\n * Schema for POST /users/create endpoint input validation\n */\nexport const CreateUserSchema = z.object({\n  body: z.object({\n    firstName: z.string(),\n    lastName: z.string(),\n    age: z.number(),\n    password: z.string(),\n    email: z.string().email(),\n  }),\n});\n\n/**\n * Type for Login payload\n */\nexport type LoginPayloadBody = z.infer<typeof LoginPayload>['body'];\n\n/**\n * Schema for Login payload input validation\n */\nexport const LoginPayload = z.object({\n  body: z.object({\n    email: z.string().email(),\n    password: z.string(),\n  }),\n});\n\n\n/**\n * Type for Reset payload\n */\nexport type ResetPasswordPayloadBody = z.infer<typeof ResetPasswordPayload>['body'];\n\n/**\n * Schema for Login payload input validation\n */\n\nexport const ResetPasswordPayload = z.object({\n  body: z.object({\n    email: z.string().email(),\n  }),\n});\n\n\n/**\n * Type for ResetNewPasswordPayloadBody\n */\nexport type ResetNewPasswordPayloadBody = z.infer<typeof ResetNewPasswordPayload>['body'];\n\n/**\n * Schema for ResetNewPasswordPayload input validation\n */\n\nexport const ResetNewPasswordPayload = z.object({\n  body: z.object({\n    token: z.string(),\n    newPassword: z.string(),\n  }),\n});\n\n\nexport const ResponseString = z.object({\n  responseObject: z.string(),\n});\n","import { z } from 'zod';\n\nexport const commonValidations = {\n  id: z.string().refine((data) => typeof data === 'string', {\n    message: 'ID must be a string value',\n  }),\n  // ... other common validations\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAqC;AAErC,IAAAA,cAAkB;;;ACFlB,iBAAkB;AAEX,IAAM,oBAAoB;AAAA,EAC/B,IAAI,aAAE,OAAO,EAAE,OAAO,CAAC,SAAS,OAAO,SAAS,UAAU;AAAA,IACxD,SAAS;AAAA,EACX,CAAC;AAAA;AAEH;;;IDDA,4CAAqB,aAAC;AAKf,IAAM,aAAa,cAAE,OAAO;AAAA,EACjC,KAAK,cAAE,OAAO,EAAE,KAAK;AAAA,EACrB,WAAW,cAAE,OAAO;AAAA,EACpB,OAAO,cAAE,OAAO,EAAE,MAAM;AAAA,EACxB,UAAU,cAAE,OAAO;AAAA,EACnB,KAAK,cAAE,OAAO;AAAA,EACd,UAAU,cAAE,OAAO;AAAA,EACnB,YAAY,cAAE,OAAO,EAAE,SAAS;AAAA,EAChC,kBAAkB,cAAE,OAAO,EAAE,SAAS;AAAA;AAAA;AAGxC,CAAC;AAKM,IAAM,eAAe,cAAE,OAAO;AAAA,EACnC,aAAa,cAAE,OAAO;AAAA,EACtB,cAAc,cAAE,OAAO;AACzB,CAAC;AAOM,IAAM,uBAAuB,cAAE,OAAO;AAAA,EAC3C,MAAM;AAAA,EACN,GAAG,aAAa;AAClB,CAAC;AAYM,IAAM,gBAAgB,cAAE,OAAO;AAAA,EACpC,QAAQ,cAAE,OAAO,EAAE,IAAI,kBAAkB,GAAG,CAAC;AAC/C,CAAC;AAUM,IAAM,mBAAmB,cAAE,OAAO;AAAA,EACvC,MAAM,cAAE,OAAO;AAAA,IACb,WAAW,cAAE,OAAO;AAAA,IACpB,UAAU,cAAE,OAAO;AAAA,IACnB,KAAK,cAAE,OAAO;AAAA,IACd,UAAU,cAAE,OAAO;AAAA,IACnB,OAAO,cAAE,OAAO,EAAE,MAAM;AAAA,EAC1B,CAAC;AACH,CAAC;AAUM,IAAM,eAAe,cAAE,OAAO;AAAA,EACnC,MAAM,cAAE,OAAO;AAAA,IACb,OAAO,cAAE,OAAO,EAAE,MAAM;AAAA,IACxB,UAAU,cAAE,OAAO;AAAA,EACrB,CAAC;AACH,CAAC;AAYM,IAAM,uBAAuB,cAAE,OAAO;AAAA,EAC3C,MAAM,cAAE,OAAO;AAAA,IACb,OAAO,cAAE,OAAO,EAAE,MAAM;AAAA,EAC1B,CAAC;AACH,CAAC;AAYM,IAAM,0BAA0B,cAAE,OAAO;AAAA,EAC9C,MAAM,cAAE,OAAO;AAAA,IACb,OAAO,cAAE,OAAO;AAAA,IAChB,aAAa,cAAE,OAAO;AAAA,EACxB,CAAC;AACH,CAAC;AAGM,IAAM,iBAAiB,cAAE,OAAO;AAAA,EACrC,gBAAgB,cAAE,OAAO;AAC3B,CAAC;","names":["import_zod"]}